#!/bin/bash
# this script must be invoked inside of bash, not plain sh
# note that this script modifies $IFS

# Toggle debugging output from debug()
DEBUG=0

infosection() {
	echo >& "$INFO"
	echo "_____________________________________________________________________________" >& "$INFO"
	echo >& "$INFO"
	echo "        $1" >& "$INFO"
	echo "_____________________________________________________________________________" >& "$INFO"
	echo >& "$INFO"
}

info() {
	infosection "command line"
	echo $COMMANDLINE 2>&1 >& "$INFO"
	infosection "uname -a"
	uname -a 2>&1 >& "$INFO"
	infosection "id"
	id 2>&1 >& "$INFO"
	infosection "env"
	env 2>&1 >& "$INFO"
	infosection "df"
	df 2>&1 >& "$INFO"
        if [ -e "/proc/cpuinfo" ]; then
		infosection "/proc/cpuinfo"
		cat /proc/cpuinfo 2>&1 >& "$INFO"
	fi
	if [ -e "/proc/meminfo" ]; then
		infosection "/proc/meminfo"
		cat /proc/meminfo 2>&1 >& "$INFO"
	fi
	if [ -f "$STDOUT" ] ; then
		infosection "stdout"
		cat $STDOUT >& "$INFO"
	fi
	if [ -f "$STDERR" ] ; then
		infosection "stderr"
		cat $STDERR >& "$INFO"
	fi
}

logstate() {
	echo "Progress " `date +"%Y-%m-%d %H:%M:%S.%N%z"` " $@" >& "$INFO"
}

log() {
	echo "$@" >& "$INFO"
}

debug() {
	[[ $DEBUG == 1 ]] && echo "$@" >& "$INFO"
}

localPath() {
        # remove protocol://
        PATH="${1#*://}"
        # Remove hostname
        PATH="${PATH#*/}"
        # remove leading "/" if present
        PATH="${PATH#/}"
	log "Transformed $1 to $PATH"
	echo $PATH
}

stagein() {
	SRC=$1
	DST=$2
	case $SRC in
		*://*)
			;;
		*)
			SRC=$URLPREFIX/$SRC
			;;
	esac
	
	log "Staging in $SRC to $DST"
	
	case $SRC in
		file://*)
			SRC=${SRC#file://*/}
			log "Copying $SRC to $DST"
			if [ ! -f $SRC ]; then
				fail 254 "Cannot stage in $SRC. File not found."
			fi
            ln -s $SRC $DST 2>&1 >& "$INFO"
			;;
		stage://*)
			SRC=${SRC#stage://}
			log "Copying $SRC to $DST"
			if [ ! -f $SRC ]; then
				fail 254 "Cannot stage in $SRC. File not found."
			fi
                        dd if=$SRC of=$DST bs=10M 2>&1 >& "$INFO"
			;;
                direct://*)
                	SRC=${SRC#direct://}
                        log "Linking $SRC to $DST"
                        if [ ! -f $SRC ]; then
				fail 245 "Cannot stage in $SRC. File not found."
			fi
                        ln -s $SRC $DST 2>&1 >& "$INFO"
                        ;;
		http://*)
			log "Fetching $SRC using wget"
			wget $SRC -O $DST 2>&1 >& "$INFO"
			;;
		*://*)
			fail 254 "Cannot handle protocol ${SRC%%://*}"
			;;
		*)
			fail 254 "Invalid URL: $SRC"
			;;
	esac
}

stageout() {
	SRC=$1
	DST=$2
	
	case $DST in
		*://*)
			;;
		*)
			DST=$URLPREFIX/$DST
	esac
	
	log "Staging out $SRC to $DST"
	
	local DIR
	
	case $DST in
		file://*)
			DST=${DST#file://}
			DIR=`dirname $DST`
			mkdir -p $DIR
			log "Copying $SRC to $DST"
			dd if=$SRC of=$DST bs=16M 2>&1 >& "$INFO"
			;;
		*://*)
			fail 254 "Cannot handle protocol ${DST%%://*}"
			;;
		*)
			fail 254 "Invalid URL: $DST"
			;;
	esac
}


fail() {
	EC=$1
	shift
	
	if [ "X$DIR" != "X" ]; then
		echo $@ >"$DIR/_swift.error"
		stageout "$DIR/_swift.error" "$JOBDIR/_swift.error"
	else
		echo $@
	fi
		
	log $@
	info
	if [ "$STATUSMODE" = "files" ]; then
		exit 0
	else
		exit $EC
	fi
}

checkError() {
	if [ "$?" != "0" ]; then
		fail $@
	fi
}

checkEmpty() {
	if [ "$1" == "" ]; then
		shift
		fail 254 $@
	fi
}

checkparamfile() {
	log "checking for paramfile"
	if [ "$1" == "-p" ]; then
		PARAMFILE="$SCRATCH/_paramfile"
		stagein "$URLPREFIX/$2" "$PARAMFILE"
	fi
	log "paramfile is: $PARAMFILE"
}

getarg() {
	NAME=$1
	shift
	VALUE=""
	SHIFTCOUNT=0
	if [ "$PARAMFILE" == "" ] && [ "$1" == "$NAME" ]; then
		shift
		let "SHIFTCOUNT=$SHIFTCOUNT+1"
		while [ "${1:0:1}" != "-" ] && [ "$#" != "0" ]; do
			VALUE="$VALUE $1"
			shift
			let "SHIFTCOUNT=$SHIFTCOUNT+1"
		done
		VALUE="${VALUE:1}"
	elif [ "$PARAMFILE" != "" ] && grep -E "^$NAME " $PARAMFILE ; then
		VALUE=$(grep -E "^$NAME " $PARAMFILE | cut -d ' ' -f 2-)
	else
		fail 254 "Missing $NAME argument"
	fi
}

openinfo() {
	exec 3<> $1
	INFO=3
}

closeinfo() {
	exec 3>&-
}

contains() {
	ARRAY=$1
	X=$2

	for a in ${!ARRAY}
	do
		if [[ ${a} == ${X} ]]; then
			return 0
		fi
	done
	return 1
}

genScripts() {
	echo "#!/bin/bash" > run.sh
	echo -n "\"$EXEC\" " >> run.sh
	for CMDARG in "${CMDARGS[@]}"; do
    	echo -n "\"$CMDARG\" " >> run.sh
	done
	echo "1>>\"$STDOUT\" 2>>\"$STDERR\"" >> run.sh
	chmod +x run.sh
}

cdm_local_output()
{
 	L=$1

	if [[ $CDM_FILE == "" ]]; then
		return
	fi

 	CDM_POLICY=$( cdm_lookup shared/cdm.pl $CDM_FILE $L )
	if [[ $CDM_POLICY == "LOCAL" ]]; then
		cdm_local_output_perform $L $CDM_POLICY
	fi
}

cdm_local_output_perform()
{
	L=$1
	TOOL=$2
	REMOTE_DIR=$3
	FLAGS=$3
	log "Copying $REMOTE_DIR/$FILE to $JOBDIR/$FILE"
	mkdir -p $REMOTE_DIR
	checkError 254 "CDM[LOCAL]: mkdir -p $REMOTE_DIR failed!"
	$TOOL $FLAGS $JOBDIR/$FILE $REMOTE_DIR/$FILE
	checkError 254 "CDM[LOCAL]: Tool failed!"
}

cdm_gather()
{
	GATHER_OUTPUT=${*}
	if [[ $CDM_FILE == "" ]]; then
		return
	fi
	if [[ $GATHER_OUTPUT == "" ]]; then
		return
	fi

	cdm_gather_action $GATHER_MAX $GATHER_OUTPUT
}

strip_prefix()
{
   echo $@ | sed -e s/__root__//g -e s/__parent__//g 
}

COMMANDLINE=$@
PARAMFILE=

openinfo "wrapper.log"
ID=$1
checkEmpty "$ID" "Missing job ID"

shift

getarg "-urlprefix" "$@"
URLPREFIX=$VALUE
shift $SHIFTCOUNT

getarg "-jobdir" "$@"
JOBDIR=$VALUE
shift $SHIFTCOUNT

getarg "-scratch" "$@"
SCRATCH=$VALUE/$ID
shift $SHIFTCOUNT

checkparamfile "$@"

INFODIR=$SCRATCH

checkEmpty "$JOBDIR" "Missing job directory prefix"
mkdir -p $INFODIR
closeinfo

if [ -z $MPI_RANK ]; then
	INFOFILE="$INFODIR/_swift.info"
else
	# Rename info file for each rank
	INFOFILE="$INFODIR/_swift.info-${PMI_RANK}"
	# Build list of per-rank info files
	echo $INFOFILE >> $INFODIR/_swift.info
fi
rm -f $INFOFILE
openinfo "$INFOFILE"

logstate "LOG_START"
infosection "Wrapper (_swiftwrap)"

getarg "-e" "$@"
EXEC=$VALUE
shift $SHIFTCOUNT

getarg "-out" "$@"
STDOUT=$VALUE
shift $SHIFTCOUNT

getarg "-err" "$@"
STDERR=$VALUE
shift $SHIFTCOUNT

getarg "-i" "$@"
STDIN=$VALUE
shift $SHIFTCOUNT

getarg "-d" "$@"
DIRS=$( strip_prefix $VALUE )
shift $SHIFTCOUNT

getarg "-if" "$@"
INF=$VALUE
shift $SHIFTCOUNT

getarg "-of" "$@"
OUTF=$VALUE
shift $SHIFTCOUNT

getarg "-wt" "$@"
WRAPPERLOG_ALWAYS_TRANSFER=$VALUE
shift $SHIFTCOUNT

getarg "-sk" "$@"
SITEDIR_KEEP=$VALUE
shift $SHIFTCOUNT

getarg "-cdmfile" "$@"
CDM_FILE=
if [ "X$VALUE" != "X" ]; then
	CDM_FILE=shared/$VALUE
fi
shift $SHIFTCOUNT

getarg "-status" "$@"
STATUSMODE=$VALUE
shift $SHIFTCOUNT

declare -a CMDARGS
if [ "$PARAMFILE" == "" ] && [ "$1" == "-a" ] ; then
	shift
	CMDARGS=( $( strip_prefix "$@" ) )
elif [ "$PARAMFILE" != "" ] ; then
	CMDARGS=()
	FIRST=1
	while read line ; do
		if [ "$FIRST" == "1" ] ; then
			CMDARGS=("$line")
			FIRST=0
		else
			CMDARGS=("${CMDARGS[@]}" "$line")
		fi
	done < <(grep -E "^-a " $PARAMFILE | cut -d " " -f 2-)
else
	fail 254 "Missing arguments (-a option)"
fi

if [ "X$CDM_FILE" != "X" ]; then
	# TODO
	logstate "SOURCE_CDM_LIB $WFDIR/shared/cdm_lib.sh"
	source $WFDIR/shared/cdm_lib.sh
	checkError 254 "Could not source: $WFDIR/shared/cdm_lib.sh"
fi

if [ "X$SCRATCH" == "X" ]; then
	error "Wrapper staging requires a scratch directory to be specified"
fi

DIR="$SCRATCH/$JOBID"

PATH=$PATH:/bin:/usr/bin

if [ "$PATHPREFIX" != "" ]; then
	export PATH=$PATHPREFIX:$PATH
fi

if [ "$SWIFT_EXTRA_INFO" != "" ]; then
	log "EXTRAINFO=$($SWIFT_EXTRA_INFO)"
fi

if [ "X${EXEC:0:1}" != "X/" ] ; then
	export ORIGEXEC=$EXEC
	export EXEC=$(which $EXEC)
	if [ "X$EXEC" = "X" ] ; then
		fail 254 "Cannot find executable $ORIGEXEC on site system path"
	fi
fi

log "PID=$$"
log "HOST=$HOST"
log "PWD=$PWD"
log "DIR=$DIR"
log "EXEC=$EXEC"
log "STDIN=$STDIN"
log "STDOUT=$STDOUT"
log "STDERR=$STDERR"
log "DIRS=$DIRS"
log "INF=$INF"
log "OUTF=$OUTF"
log "WRAPPERLOG_ALWAYS_TRANSFER=$WRAPPER_LOG_ALWAYS_TRANSFER"
log "SITEDIR_KEEP=$SITEDIR_KEEP"
log "CDM_FILE=$CDM_FILE"
log "ARGS=$@"
log "ARGC=$#"

[ -n $MPI_RANK ] && log "MPI_RANK=$MPI_RANK" && log "PMI_RANK=$PMI_RANK"
IFS="|"

logstate "CREATE_JOBDIR"
mkdir -p $DIR
checkError 254 "Failed to create job directory $DIR"
log "Created job directory: $DIR"

if [[ $PMI_RANK == "" || $PMI_RANK == 0 ]]; then

	logstate "CREATE_INPUTDIR"
	for D in $DIRS ; do
		mkdir -p "$DIR/$D" 2>&1 >>"$INFO"
		checkError 254 "Failed to create input directory $D"
		log "Created output directory: $DIR/$D"
	done
	
	logstate "LINK_INPUTS"
	for L in $INF ; do
	    CDM_POLICY="DEFAULT"
		if [[ $CDM_FILE != "" ]]; then
			CDM_POLICY=$( cdm_lookup shared/cdm.pl $CDM_FILE $L )
		fi
		if [[ $CDM_POLICY != "DEFAULT" && $CDM_POLICY != "EXTERNAL"* ]]; then
			log "CDM_POLICY: $L -> $CDM_POLICY"
			eval cdm_action $DIR "INPUT" $L $CDM_POLICY
			continue
		fi
	
                stagein $L "$DIR/`localPath $L`"
	done
	
	if [[ $CDM_FILE != "" ]]; then
	    logstate "LINK_CDM_OUTPUTS"
	    SKIPPED_OUTPUT=()
		GATHER_OUTPUT=()
		for L in $OUTF ; do
			CDM_POLICY=$( cdm_lookup shared/cdm.pl $CDM_FILE $L )
			log "CDM_POLICY: $L -> $CDM_POLICY"
			if [[ $CDM_POLICY != "DEFAULT" &&
				  $CDM_POLICY != "BROADCAST"* ]]; then
	    	    eval cdm_action $DIR "OUTPUT" $L $CDM_POLICY
				SKIPPED_OUTPUT=( $SKIPPED_OUTPUT $L )
			fi
			if [ $CDM_POLICY == "GATHER" ]; then
				GATHER_OUTPUT=( $GATHER_OUTPUT $L )
			elif [ $CDM_POLICY == "LOCAL" ]; then
				CDM_LOCAL_OUTPUT=( $CDM_LOCAL_OUTPUT $L )
			fi
		done
	fi

fi # PMI_RANK==0

debug "Moving to jobdir: $DIR"
cd $DIR
if [ $? != 0 ]; then
	log "PWD: $PWD"
	log $( find . )
	fail 254 "Could not cd to: $DIR"
fi
logstate "EXECUTE"

debug "Command line: $EXEC ${CMDARGS[@]}"

if [ ! -f "$EXEC" ]; then
	fail 254 "The executable $EXEC does not exist"
fi
if [ ! -x "$EXEC" ]; then
	fail 254 "The executable $EXEC does not have the executable bit set"
fi

if [ "$STDIN" == "" ]; then
	if [ "$SWIFT_GEN_SCRIPTS" != "" ]; then
		genScripts
	fi
	"$EXEC" "${CMDARGS[@]}" 1>>"$STDOUT" 2>>"$STDERR"
else
	if [ "$SWIFT_GEN_SCRIPTS" != "" ]; then
		genScripts
	fi
	"$EXEC" "${CMDARGS[@]}" 1>>"$STDOUT" 2>>"$STDERR" <"$STDIN"
fi
checkError $? "Application $EXEC failed with an exit code of $?"

logstate "EXECUTE_DONE"
log "Job ran successfully"

if [[ $MPI_RANK == "" || $MPI_RANK == 0 ]]; then

	MISSING=
	for O in $OUTF ; do
		LO=`localPath $O`
		if [ ! -f "$DIR/$LO" ]; then
			if [ "$MISSING" == "" ]; then
				MISSING=$LO
			else
				MISSING="$MISSING, $LO"
			fi
		fi
	done
	if [ "$MISSING" != "" ]; then
		log $( find . )
		fail 254 "The following output files were not created by the application: $MISSING"
	fi
	
	logstate "MOVING_OUTPUTS $OUTF"
	for O in $OUTF ; do
		if ! contains SKIPPED_OUTPUT $O ; then
			stageout "$DIR/`localPath $O`" "$O" 
		fi
	done
	
	cdm_local_output $CDM_LOCAL_OUTPUT
	cdm_gather $GATHER_OUTPUT
	
	if [ "$STATUSMODE" = "files" ]; then
		logstate "TOUCH_SUCCESS $DIR `pwd`"
		touch _swift.success
		stageout "$DIR/_swift.success" "$JOBDIR/_swift.success"  
	fi
	
	log "Moving back to workflow directory $WFDIR"
	cd $WFDIR
	if [ $? != 0 ]; then
		fail 254 "Could not cd to workflow directory: $WFDIR"
	fi
	
	if [ "$WRAPPERLOG_ALWAYS_TRANSFER" == "true" ]; then
		stageout "$INFOFILE" "$JOBDIR/_swift.info"
	fi
	if [ "$SITEDIR_KEEP" != "true" ]; then
		logstate "RM_JOBDIR"
		rm -rf "$DIR" 2>&1 >& "$INFO"
		checkError 254 "Failed to remove job directory $DIR"
	fi
else
	# Allow rank 0 to write output
	sleep 1
fi # MPI_RANK==0

logstate "END"

closeinfo

if [ "$WRAPPER_LOG_ALWAYS_TRANSFER" == "true" ]; then
	stageout "$DIR/_swift.info" "$JOBID/_swift.info"
fi

# ensure we exit with a 0 after a successful execution
exit 0
